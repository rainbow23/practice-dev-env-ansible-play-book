- name: Permission change to directories
  file:
    path: "{{ home_path }}/{{ item }}"
    owner: "{{ ansible_user }}"
    group: wheel
    mode: 0755
    recurse: true
    state: directory
  with_items:
    - autojump
    - dotfiles
    - .tmux/plugins/tpm
    - vim8src

- name: Install autojump
  shell: "cd {{ home_path }}/autojump && ./install.py"
  args:
    executable: /bin/bash
  become_user: "{{ ansible_user }}"

- block:
  # - name: goenv pyenvディレクトリの存在チェック
  #   stat:
  #     path: "{{ home_path }}/.anyenv/envs/{{ item }}"
  #   register: "{{ item }}_path"
  #   with_items:
  #     - goenv
  #     - pyenv
  #   listen: Install goenv pyenv

  - name: install goenv pyenv
    shell: |
      anyenv install {{ item }}
      exec $SHELL -l
    args:
      executable: /bin/bash
    become_user: "{{ ansible_user }}"
    # when: '"{{ item }}_path.stat.exists ==  False"'
    with_items:
      - goenv
      - pyenv
    listen: Install goenv pyenv

  - name: install go, python and activate
    shell: |
      {{ item.env }} install {{ item.ver }}
      {{ item.env }} global {{ item.ver }}
      {{ item.env }} rehash
      exec $SHELL -l
    with_items:
      - { env: "goenv", ver: "{{ go_version }}" }
      - { env: "pyenv", ver: "{{ python_version }}" }
    args:
      executable: /bin/bash
    become_user: "{{ ansible_user }}"
    listen: Install goenv pyenv

- block:
  - name: add go path to .bashrc and .zshrc
    shell: |
      echo -e '\n# Go' >> {{ item }}
      echo 'if [ -d $HOME/.anyenv/envs/goenv ] ; then' >> {{ item }}
      echo '    export GOPATH=$HOME/go' >> {{ item }}
      echo '    export GOBIN=$GOPATH/bin' >> {{ item }}
      echo '    eval "$(goenv init -)"' >> {{ item }}
      echo 'fi' >>  {{ item }}
      exec $SHELL -l
    with_items:
      - ~/.bashrc
      - ~/.zshrc
    args:
      executable: /bin/bash
    become_user: "{{ ansible_user }}"
    listen: Go path to shell
  - name: add pyenv path to .bashrc and .zshrc
    shell: |
      echo -e '\n# pyenv' >> {{ item }}
      echo 'if [ -d $HOME/.anyenv/envs/pyenv ] ; then' >> {{ item }}
      echo '    export PATH="$HOME/.anyenv/envs/pyenv/bin:$PATH"' >> {{ item }}
      echo '    eval "$(pyenv init -)"' >> {{ item }}
      echo '    eval "$(pyenv virtualenv-init -)"' >> {{ item }}
      echo 'fi' >>  {{ item }}
      exec $SHELL -l
      pyenv update
    with_items:
      - ~/.bashrc
      - ~/.zshrc
    become_user: "{{ ansible_user }}"
    listen: Python path to shell

  - name: install fzf
    shell: |
      cd $HOME/.fzf
      ./install
    become_user: "{{ ansible_user }}"
    listen: Install fzf

- block:
  - name: /usr/local/bin/vim ディレクトリの存在チェック
    stat:
      path: /usr/local/bin/vim
    register: vim_path
    listen: Compile Vim
  - name: compile vim
    shell: >
      cd {{ home_path }}/vim8src && ./configure
      --enable-fail-if-missing
      --with-features=huge
      --disable-selinux
      --enable-luainterp
      --enable-perlinterp
      --enable-python3interp vi_cv_path_python3={{ pyenv_path }}
      --with-python3-config-dir={{ pyenv_gnu }}
      --enable-cscope
      --enable-fontset
      --enable-multibyte
    args:
      executable: /bin/bash
    become_user: "{{ ansible_user }}"
    when: vim_path.stat.exists == False
    listen: Compile Vim

  - name: Make & install Vim
    shell: |
      cd {{ home_path }}/vim8src
      make
      make install
      git reset --hard
    when: vim_path.stat.exists == False
    args:
      executable: /bin/bash
    listen: Compile Vim

- block:
  - name: Delete cloned directories
    file:
      path: "{{ home_path }}/{{ item }}"
      state: absent
    with_items:
      - autojump
      - tmuxsrc
      - vim8src
